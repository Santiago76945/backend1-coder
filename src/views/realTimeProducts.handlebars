<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <title>Productos en Tiempo Real</title>
</head>

<body>
    <h1>Productos en Tiempo Real</h1>
    <ul id="productsList">
        {{#each products}}
        <li data-id="{{this.id}}">
            <strong>{{this.title}}</strong> - {{this.description}} - ${{this.price}}
            <button class="deleteProduct" data-id="{{this.id}}">Eliminar</button>
        </li>
        {{/each}}
    </ul>

    <h2>Agregar nuevo producto</h2>
    <form id="productForm">
        <input type="text" name="title" placeholder="Título" required>
        <input type="text" name="description" placeholder="Descripción" required>
        <input type="text" name="code" placeholder="Código" required>
        <input type="number" name="price" placeholder="Precio" step="0.01" required>
        <input type="number" name="stock" placeholder="Stock" required>
        <input type="text" name="category" placeholder="Categoría" required>
        <button type="submit">Agregar Producto</button>
    </form>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();

        // Actualiza la lista de productos en tiempo real
        socket.on('updateProducts', (products) => {
            const productsList = document.getElementById('productsList');
            productsList.innerHTML = '';
            products.forEach(product => {
                const li = document.createElement('li');
                li.setAttribute('data-id', product.id);
                li.innerHTML = `<strong>${product.title}</strong> - ${product.description} - $${product.price} <button class="deleteProduct" data-id="${product.id}">Eliminar</button>`;
                productsList.appendChild(li);
            });
        });

        // Manejo del formulario para agregar producto vía HTTP (se aprovecha que el servidor emite el update)
        document.getElementById('productForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData(e.target);
            const product = {
                title: formData.get('title'),
                description: formData.get('description'),
                code: formData.get('code'),
                price: parseFloat(formData.get('price')),
                stock: parseInt(formData.get('stock')),
                category: formData.get('category')
            };
            // Se realiza la petición POST para agregar el producto
            const response = await fetch('/api/products', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(product)
            });
            if (response.ok) {
                e.target.reset();
            } else {
                alert('Error al agregar producto');
            }
        });

        // Manejo de eliminación de producto vía HTTP
        document.getElementById('productsList').addEventListener('click', async (e) => {
            if (e.target.classList.contains('deleteProduct')) {
                const productId = e.target.getAttribute('data-id');
                const response = await fetch(`/api/products/${productId}`, {
                    method: 'DELETE'
                });
                if (!response.ok) {
                    alert('Error al eliminar producto');
                }
            }
        });
    </script>
</body>

</html>